name: "Labeler: Promote Model"
description: "Promote a trained model to be active, backing up the currently active model."

inputs:
  model:
    description: "The model to promote. Must be 'issues' or 'pulls'."
    required: true
  staged_key:
    description: "The suffix for the staged cache entry to promote."
    required: true
  backup_key:
    description: "The suffix for the backup cache entry. This cache entry must not exist if there is an active entry to back up."
    required: true

branding:
  color: "purple"
  icon: "arrow-up"

runs:
  using: "composite"
  steps:
    - name: "Validate Inputs"
      run: |
        if [[ "${{ inputs.model }}" != "issues" && "${{ inputs.model }}" != "pulls" ]]; then
          echo "Invalid model: ${{ inputs.model }}. Must be 'issues' or 'pulls'."
          exit 1
        fi

        if [[ -z "${{ inputs.staged_key }}" || ! "${{ inputs.staged_key }}" =~ ^[a-zA-Z0-9/_\-]+$ ]]; then
          echo "Invalid staged_key: ${{ inputs.staged_key }}. Must be non-empty and contain only alphanumeric characters, hyphens, underscores, or slashes."
          exit 1
        fi

        if [[ -z "${{ inputs.backup_key }}" || ! "${{ inputs.backup_key }}" =~ ^[a-zA-Z0-9/_\-]+$ ]]; then
          echo "Invalid backup_key: ${{ inputs.backup_key }}. Must be non-empty and contain only alphanumeric characters, hyphens, underscores, or slashes."
          exit 1
        fi

        if [[ "${{ inputs.staged_key }}" == "ACTIVE" || "${{ inputs.backup_key }}" == "ACTIVE" || "${{ inputs.staged_key }}" == "${{ inputs.backup_key }}" ]]; then
          echo "The staged and backup keys must be different and cannot be 'ACTIVE'."
          exit 1
        fi

    - name: "Set Environment Variables"
      shell: bash
      run: |
        echo "CACHE_PATH=labeler-cache/${{ inputs.model }}-model.zip" >> $GITHUB_ENV
        echo "staged_KEY=issue-labeler/model/${{ inputs.model }}/${{ inputs.staged_key }}" >> $GITHUB_ENV
        echo "ACTIVE_KEY=issue-labeler/model/${{ inputs.model }}/ACTIVE" >> $GITHUB_ENV
        echo "BACKUP_KEY=issue-labeler/model/${{ inputs.model }}/${{ inputs.backup_key }}" >> $GITHUB_ENV

    - name: "Check for existing staged cache entry"
      id: check-staged
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.CACHE_PATH }}
        key: ${{ env.staged_KEY }}
        lookup-only: true
        fail-on-cache-miss: true

    - name: "Check for existing backup cache entry"
      if: ${{ steps.check-staged.outputs.cache-hit == 'true' }}
      id: check-backup
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.CACHE_PATH }}
        key: ${{ env.BACKUP_KEY }}
        lookup-only: true
        fail-on-cache-miss: false

    - name: "Restore existing active cache entry"
      if: ${{ steps.check-staged.outputs.cache-hit == 'true' }}
      id: check-active
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.CACHE_PATH }}
        key: ${{ env.ACTIVE_KEY }}
        fail-on-cache-miss: false

    - name: "Abort if backup cache entry already exists"
      if: ${{ steps.check-active.outputs.cache-hit == 'true' && steps.check-backup.outputs.cache-hit == 'true' }}
      shell: bash
      run: |
        echo "Cannot save backup of current active cache entry. Backup cache entry already exists."
        echo "Key: ${{ env.BACKUP_KEY }}"
        exit 1

    - name: "Cache backup of current active cache entry"
      if: ${{ steps.check-active.outputs.cache-hit == 'true' }}
      id: backup-file
      uses: actions/cache/save@v4
      with:
        path: ${{ env.CACHE_PATH }}
        key: ${{ env.BACKUP_KEY }}

    - name: "Remove local copy of current active cache entry"
      if: ${{ steps.check-active.outputs.cache-hit == 'true' }}
      shell: bash
      run: |
        rm ${{ env.CACHE_PATH }}

    - name: "Restore the staged cache entry to promote"
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.CACHE_PATH }}
        key: ${{ env.staged_KEY }}
        fail-on-cache-miss: true

    - name: "Delete existing active cache entry"
      if: ${{ steps.check-active.outputs.cache-hit == 'true' }}
      shell: bash
      run: |
        gh api --method DELETE \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ github.repository }}/actions/caches?key=${{ env.ACTIVE_KEY }}

    - name: "Save the staged cache entry as the active cache entry"
      uses: actions/cache/save@v4
      with:
        path: ${{ env.CACHE_PATH }}
        key: ${{ env.ACTIVE_KEY }}
