name: "Labeler: Training"
description: "Train the Issues and Pull Requests models for label prediction."

on:
  workflow_dispatch:
    inputs:
      type:
        description: "Issues or Pull Requests"
        type: choice
        required: true
        default: "Both"
        options:
          - "Both"
          - "Issues"
          - "Pull Requests"

      steps:
        description: "Training Steps"
        type: choice
        required: true
        default: "All"
        options:
          - "All"
          - "Download Data"
          - "Train Model"
          - "Test Model"

      repository:
        description: "The org/repo to download data from. Defaults to the current repository."
      limit:
        description: "Max number of items to download for training/testing the model (newest items are used). Defaults to the max number of pages times the page size."
        type: number
      page_size:
        description: "Number of items per page in GitHub API requests. Defaults to 100 for issues, 25 for pull requests."
        type: number
      page_limit:
        description: "Maximum number of pages to download for training/testing the model. Defaults to 1000 for issues, 4000 for pull requests."
        type: number
      cache_key_suffix:
        description: "The cache key suffix to use for staged data/models (use 'ACTIVE' to bypass staging). Defaults to 'staged'."
        required: true
        default: "staged"

env:
  CACHE_KEY: ${{ inputs.cache_key_suffix }}
  REPOSITORY: ${{ inputs.repository || github.repository }}
  LABEL_PREFIX: "area-"
  EXCLUDED_AUTHORS: "null"
  THRESHOLD: "0.40"
  LIMIT: ${{ inputs.limit }}
  PAGE_SIZE: ${{ inputs.page_size }}
  PAGE_LIMIT: ${{ inputs.page_limit }}

  JOB_ISSUES: ${{ contains(fromJSON('["Both", "Issues"]'), inputs.type)}}
  JOB_PULLS: ${{ contains(fromJSON('["Both", "Pull Requests"]'), inputs.type)}}
  JOB_DOWNLOAD: ${{ contains(fromJSON('["All", "Download Data"]'), inputs.steps)}}
  JOB_TRAIN: ${{ contains(fromJSON('["All", "Train Model"]'), inputs.steps)}}
  JOB_TEST: ${{ contains(fromJSON('["All", "Test Model"]'), inputs.steps)}}

jobs:
  download:
    strategy:
      fail-fast: false
      matrix:
        include:
          - type: issues
            run: ${{ env.JOB_ISSUES }}
          - type: pulls
            run: ${{ env.JOB_PULLS }}
    runs-on: ubuntu-latest
    permissions:
      issues: read
      pull-requests: read
    if: ${{ env.JOB_DOWNLOAD && matrix.run }}
    steps:
      - name: "Download Data for ${{ matrix.type == 'issues' && 'Issues' || 'Pull Requests' }}"
        uses: jeffhandley/issue-labeler/download@main
        with:
          type: ${{ matrix.type }}
          cache_key: ${{ env.CACHE_KEY }}
          repository: ${{ env.REPOSITORY }}
          label_prefix: ${{ env.LABEL_PREFIX }}
          excluded_authors: ${{ env.EXCLUDED_AUTHORS }}
          limit: ${{ env.LIMIT }}
          page_size: ${{ env.PAGE_SIZE }}
          page_limit: ${{ env.PAGE_LIMIT }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

  train:
    strategy:
      fail-fast: false
      matrix:
        include:
          - type: "issues"
            run: ${{ env.JOB_ISSUES }}
          - type: "pulls"
            run: ${{ env.JOB_PULLS }}
    runs-on: ubuntu-latest
    permissions: {}
    needs: download
    if: ${{ env.JOB_TRAIN && matrix.run && (needs.download.result == 'success' || !env.JOB_DOWNLOAD) }}
    steps:
      - name: "Train Model for ${{ matrix.type == 'issues' && 'Issues' || 'Pull Requests' }}"
        uses: jeffhandley/issue-labeler/train@main
        with:
          type: ${{ matrix.type }}
          data_cache_key: ${{ env.CACHE_KEY }}
          model_cache_key: ${{ env.CACHE_KEY }}

  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - type: "issues"
            run: ${{ env.JOB_ISSUES }}
          - type: "pulls"
            run: ${{ env.JOB_PULLS }}
    runs-on: ubuntu-latest
    permissions:
      issues: read
      pull-requests: read
    needs: train
    if: ${{ env.JOB_TEST && matrix.run && (needs.train.result == 'success' || !env.JOB_TRAIN) }}
    steps:
      - name: "Test Model for ${{ matrix.type == 'issues' && 'Issues' || 'Pull Requests' }}"
        uses: jeffhandley/issue-labeler/test@main
        with:
          type: ${{ matrix.type }}
          cache_key: ${{ env.CACHE_KEY }}
          repository: ${{ env.REPOSITORY }}
          label_prefix: ${{ env.LABEL_PREFIX }}
          excluded_authors: ${{ env.EXCLUDED_AUTHORS }}
          threshold: ${{ env.THRESHOLD }}
          limit: ${{ env.LIMIT }}
          page_size: ${{ env.PAGE_SIZE }}
          page_limit: ${{ env.PAGE_LIMIT }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
