name: "Download Data"
description: "Download GitHub issues or pull requests and cache the data."

branding:
  color: "purple"
  icon: "tag"

inputs:
  type:
    description: "The type of data to download. Must be either 'issues' or 'pulls'."
    required: true
  label_prefix:
    description: "The label prefix to be used for model training. Must end in a non-alphanumeric character."
    required: true
  cache_key:
    description: "The cache key suffix to use for saving data. Default: 'staged'."
    default: "staged"
  limit:
    description: "Max number of items to download (newest items are downloaded)."
  page_size:
    description: "The number of items to include on each request."
  page_limit:
    description: "Max pages of items to download."
  retries:
    description: "Comma-separated list of retry delays in seconds."
  repository:
    description: "The org/repo to download data from. Defaults to current repository."

runs:
  using: "composite"
  steps:
    - name: "Validate inputs and set cache variables"
      shell: bash
      run: |
        if [[ "${{ inputs.type }}" != "issues" && "${{ inputs.type }}" != "pulls" ]]; then
          echo "::error::'type' must be either 'issues' or 'pulls'. Value provided: '${{ inputs.type }}'"
          echo ":x: **ERROR**" >> $GITHUB_STEP_SUMMARY
          echo "\`type\` must be either 'issues' or 'pulls'." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

        echo "DATA_PATH=${{ format('labeler-cache/{0}-data.tsv', inputs.type) }}" >> $GITHUB_ENV
        echo "CACHE_KEY=${{ format('issue-labeler/data/{0}/{1}', inputs.type, inputs.cache_key || 'staged') }}" >> $GITHUB_ENV

    - name: "Check for Existing Cache"
      id: check-cache
      uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: ${{ env.DATA_PATH }}
        key: ${{ env.CACHE_KEY }}
        lookup-only: true
        fail-on-cache-miss: false

    - name: "Abort if Existing Cache Exists"
      shell: bash
      run: |
        if [[ "${{ steps.check-cache.outputs.cache-hit }}" == "true" ]]; then
          echo "::error::Cache key '${{ env.CACHE_KEY }}' already exists. Cannot proceed with downloading."
          echo ":x: **ERROR**" >> $GITHUB_STEP_SUMMARY
          echo "Cache key \`${{ env.CACHE_KEY }}\` already exists. Cannot proceed with downloading." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> [!TIP]" >> $GITHUB_STEP_SUMMARY
          echo "> Either use a different \`cache_key\` value or delete the existing cache entry from the [Action Caches](/${{ github.repository }}/actions/caches) page and run the workflow again." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: "Check out the 'issue-labeler' repo"
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: jeffhandley/issue-labeler
        ref: main

    - uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1
      with:
        dotnet-version: "9.0.x"

    - name: "Run Downloader"
      shell: bash
      run: |
        dotnet run -c Release --project IssueLabeler/src/Downloader -- \
          ${{ format('--repo "{0}"', inputs.repository || github.repository) }} \
          ${{ format('--label-prefix "{0}"', inputs.label_prefix) }} \
          ${{ format('--{0}-data "{1}"', inputs.type, env.DATA_PATH) }} \
          ${{ (inputs.limit && format('--{0}-limit {1}', inputs.type, inputs.limit)) || '' }} \
          ${{ (inputs.page_size && format('--page-size {0}', inputs.page_size)) || '' }} \
          ${{ (inputs.page_limit && format('--page-limit {0}', inputs.page_limit)) || '' }} \
          ${{ (inputs.retries && format('--retries "{0}"', inputs.retries)) || '' }}

    - name: "Save Cache"
      uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: ${{ env.DATA_PATH }}
        key: ${{ env.CACHE_KEY }}
